import { Injectable } from '@nestjs/common';
import { PositionDto } from './position.dto';
import { Bill } from './bill.entity';
import { Position } from './position.entity';
import { Repository } from 'typeorm';
import { InjectRepository } from '@nestjs/typeorm';
import { BillState } from './state.enum';

@Injectable()
export class BillService {
  //private readonly sessions = new Map<number, PositionDto[]>();

  constructor(
    @InjectRepository(Bill) private readonly billRepository: Repository<Bill>,
    @InjectRepository(Position)
    private readonly positionRepository: Repository<Position>,
  ) {}

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–∫—Ä—ã—Ç—ã–π —Å—á—ë—Ç
   *
   * @param userId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns true, –µ—Å–ª–∏ —Å—á–µ—Ç –µ—Å—Ç—å. false - –µ—Å–ª–∏ –Ω–µ—Ç.
   */
  async hasOpenedBill(userId: number): Promise<boolean> {
    return (
      (await this.billRepository.countBy({
        userId: userId,
        state: BillState.OPENED,
      })) != 0
    );
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–π —Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
   *
   * @param userId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns –æ—Ç–∫—Ä—ã—Ç—ã–π —Å—á–µ—Ç
   */
  async getOpenedBillByUserId(userId: number): Promise<Bill> {
    return this.billRepository.findOneBy({
      userId: userId,
      state: BillState.OPENED,
    });
  }

  /**
   * –î–µ–ª–∞–µ—Ç —Ä–∞—Å—á–µ—Ç —Å—É–º–º—ã –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–∏ÃÜ –≤ —Å—á–µ—Ç–µ
   *
   * @param telegramId telegramId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É —Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async calcCurrentBillAmount(userId: number): Promise<number> {
    const bill = await this.getOpenedBillByUserId(userId);
    const positions = await this.positionRepository.findBy({
      billId: bill.id,
    });
    return positions.reduce((acc, next) => acc + next.price, 0);
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –≤ –æ—Ç–∫—Ä—ã—Ç—ã–π —Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   *
   * @param telegramId telegramId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param position –ø–æ–∑–∏—Ü–∏—è
   */
  async addPosition(userId: number, positionDto: PositionDto): Promise<void> {
    const bill = await this.getOpenedBillByUserId(userId);

    const position = new Position();
    position.billId = bill.id;
    position.name = positionDto.name;
    position.price = positionDto.price;
    position.createdAt = new Date();
    position.updatedAt = new Date();

    await this.positionRepository.save(position);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   *
   * @param userId id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async createBill(userId: number): Promise<void> {
    const bill = new Bill();
    bill.userId = userId;
    bill.updatedAt = new Date();
    bill.createdAt = new Date();
    bill.tips = 0;
    bill.state = BillState.OPENED;
    bill.createdAt = new Date();
    bill.createdAt = new Date();
    this.billRepository.save(bill);
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—á–µ—Ç —Å—á–µ—Ç–∞ –≤ —Å—Ç—Ä–æ—á–Ω–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –µ–≥–æ
   *
   * @param userId id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns —Å—á–µ—Ç –≤ —Å—Ç—Ä–æ—á–Ω–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏
   */
  async closeBill(userId: number): Promise<string> {
    const preBill = await this.calcBill(userId);
    const bill = await this.getOpenedBillByUserId(userId);
    bill.state = BillState.CLOSED;
    bill.updatedAt = new Date();
    bill.save();
    return preBill;
  }

  /**
   * –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Å—á–µ—Ç–∞ –≤ —Å—Ç—Ä–æ—á–Ω–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏.
   *
   * @param userId id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns —Å—á–µ—Ç –≤ —Å—Ç—Ä–æ—á–Ω–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏
   */
  async calcBill(userId: number): Promise<string> {
    const bill = await this.getOpenedBillByUserId(userId);
    const positions = await this.positionRepository.findBy({
      billId: bill.id,
    });

    return (
      positions
        .map((position) => position.name + ' ' + position.price)
        .join('\n') +
      '\n ----- \n –ò—Ç–æ–≥–æ: ' +
      (await this.calcCurrentBillAmount(userId)) +
      ' üí∞.'
    );
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å—á–µ—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   *
   * @returns –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—á–µ—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async getBillsCount(): Promise<number> {
    return await this.billRepository.count();
  }
}
